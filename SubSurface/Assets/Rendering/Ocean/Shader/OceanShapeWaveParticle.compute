// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel ParticleToPoint
#pragma kernel PointsToDisplacement_X
#pragma kernel PointsToDisplacement_Y
#pragma kernel ApplyWaveParicles
#pragma kernel ClearIntTex


#define WAVEPARTICLERADIUS 6//This must be fixed
#define WAVEPARTICLESPEED 4//the speed is also fixed?
#define WAVEPARTICLEAMP 0.5
#define WP_HORI_MUL 0.5

#define METER_PER_PIXEL 0.125 

RWTexture2DArray<float4> _DisplaceArray;
RWTexture2DArray<float4> _DerivativeArray;
RWTexture2DArray<float4> _VelocityArray;
//RWTexture2DArray<float4> _DerivativeArray;
//RWTexture2DArray<float4> _NormalArray;
//RWTexture2DArray<float4> _VelocityArray;
//this map will be used though all LODs
//RWTexture2D<float4> _BaseDerivativeMap;//Previous LOD DeriMap ,R: Dxx, G:Dyy, B:Dzx, A:Dzy
//Texture2D<float4> _BaseDerivativeMap_Sample;//Same as _BaseDerivativeMap just for sampling
RWTexture2DArray<float4> _WaveParticleArray;

RWTexture2DArray<int> _PointFrame;

//sampler 
SamplerState linearClampSampler;

uint _WaveParticleCount;
struct WaveParticle
{
    float Amplitude;
    float BirthTime;
    float DispersionAngle;
    float Padding;
    float2 Direction;
    float2 Origin;
};
RWStructuredBuffer<WaveParticle> _WaveParticleBuffer;
//RWStructuredBuffer<float2> _WaveParticleParamsBuffer;

float3 _CenterPos;
float4 _LODParams;//x LODCOUNT ,y , z LOD0Size.
float4 _TimeParams;

float DistanceSquared2(float2 pA, float2 pB)
{
    return dot(pA - pB, pA - pB);
}
//custom convertion
//float range should be -100.0 ~ 100.0
//int range is -2147483648 ~ 2147483647
float Custom_IntToFloat(int value)
{
    return float(value) / 2147483647.0 * 100.0;
}

int Custom_FloatToInt(float value)
{
    return int(value / 100.0 * 2147483647.0);
}

float4 GetBilinearWeight(float2 UV)
{
    float2 xy = UV - floor(UV);

    //Weights for p00,p01,p10,p11

    float4 Weightxy = float4(
        (1 - xy.x) * (1 - xy.y),
        (1 - xy.x) * (xy.y),
        (xy.x)* (1 - xy.y),
        (xy.x) * (xy.y));

    return Weightxy;
}

float4 BilinearSamplerTextureArray(RWTexture2DArray<float4> TexArray, float2 UVcoord, int PreviousLODIndex)
{
    int LODCount = (int)_LODParams.x;
    if (PreviousLODIndex > LODCount-1)
    {
        return float4(0.0, 0.0, 0.0, 0.0);
    }

    //float2 UV = float2(coord.x * 0.5f + 0.25f * RTSize, coord.y * 0.5f + 0.25f * RTSize);

    //Bilinear Interpolation
    uint2 P00 = uint2(floor(UVcoord.x), floor(UVcoord.y));
    uint2 P10 = uint2(ceil(UVcoord.x), floor(UVcoord.y));
    uint2 P01 = uint2(floor(UVcoord.x), ceil(UVcoord.y));
    uint2 P11 = uint2(ceil(UVcoord.x), ceil(UVcoord.y));

    float4 sample00 = TexArray[uint3(P00, PreviousLODIndex)];
    float4 sample10 = TexArray[uint3(P10, PreviousLODIndex)];
    float4 sample01 = TexArray[uint3(P01, PreviousLODIndex)];
    float4 sample11 = TexArray[uint3(P11, PreviousLODIndex)];

    float2 xy = UVcoord - floor(UVcoord);

    float4 samplexy =
        sample00 * (1 - xy.x) * (1 - xy.y) +
        sample10 * (xy.x) * (1 - xy.y) +
        sample01 * (1 - xy.x) * (xy.y) +
        sample11 * (xy.x) * (xy.y);

   return samplexy;
   //return sample00;
}

int GetWaveLODOnPos(float3 ReltivePos)
{
    //float3 ReltivePos = PositionWS - _OceanLODParams.xyz;
    float EdgeBuffer = 5.0f;
    int LODx = ceil(log2(abs(ReltivePos.x + EdgeBuffer)/(_LODParams.z*0.5f)));
    int LODy = ceil(log2(abs(ReltivePos.z + EdgeBuffer)/(_LODParams.z*0.5f)));
    
    int LODMax = max(max(LODx, LODy), 0);
    
    return LODMax;
}

[numthreads(128, 1, 1)]
void ParticleToPoint(uint3 id : SV_DispatchThreadID)
{

    
    //WaveParticle
    float2 ParticlePos = _WaveParticleBuffer[id.x].Origin + 
        WAVEPARTICLESPEED * _WaveParticleBuffer[id.x].Direction * 
        (_TimeParams.x- _WaveParticleBuffer[id.x].BirthTime);
    float ParticleAmp = _WaveParticleBuffer[id.x].Amplitude;
    float ParticleRadius = WAVEPARTICLERADIUS;

    //LOD
    float LODIndex = id.z;
    float CurrentLODSize = _LODParams.z * pow(2, LODIndex);

    //Get dims
    uint width, height, elements;
    _DisplaceArray.GetDimensions(width, height, elements);

    float2 UV = ((ParticlePos-_CenterPos.xz) / CurrentLODSize + 0.5f) * width;


    //_DisplaceArray[uint3(id.x, 0, LODIndex)] = float4(1.0, 100.0, 1.0, 1.0);

    int cva;

    if (max(UV.x, UV.y) < (float)width)
    {
        float4 B_Weight = GetBilinearWeight(UV);

        uint2 P00 = uint2(floor(UV.x), floor(UV.y));
        uint2 P01 = uint2(floor(UV.x), ceil(UV.y));
        uint2 P10 = uint2(ceil(UV.x), floor(UV.y));
        uint2 P11 = uint2(ceil(UV.x), ceil(UV.y));

        float4 displaceP00 = _DisplaceArray[uint3(P00, LODIndex)];
        float4 displaceP01 = _DisplaceArray[uint3(P01, LODIndex)];
        float4 displaceP10 = _DisplaceArray[uint3(P10, LODIndex)];
        float4 displaceP11 = _DisplaceArray[uint3(P11, LODIndex)];

        displaceP00.a += ParticleAmp * B_Weight[0];
        displaceP01.a += ParticleAmp * B_Weight[1];
        displaceP10.a += ParticleAmp * B_Weight[2];
        displaceP11.a += ParticleAmp * B_Weight[3];

        float ampP00 = ParticleAmp * B_Weight[0];
        float ampP01 = ParticleAmp * B_Weight[1];
        float ampP10 = ParticleAmp * B_Weight[2];
        float ampP11 = ParticleAmp * B_Weight[3];

        InterlockedAdd(_PointFrame[uint3(P00, LODIndex)], Custom_FloatToInt(ampP00), cva);
        InterlockedAdd(_PointFrame[uint3(P01, LODIndex)], Custom_FloatToInt(ampP01), cva);
        InterlockedAdd(_PointFrame[uint3(P10, LODIndex)], Custom_FloatToInt(ampP10), cva);
        InterlockedAdd(_PointFrame[uint3(P11, LODIndex)], Custom_FloatToInt(ampP11), cva);
        //_DisplaceArray[uint3(P00, LODIndex)] = displaceP00;
        //_DisplaceArray[uint3(P01, LODIndex)] = displaceP01;
        //_DisplaceArray[uint3(P10, LODIndex)] = displaceP10;
        //_DisplaceArray[uint3(P11, LODIndex)] = displaceP11;
    }
}


[numthreads(32,32,1)]
void PointsToDisplacement_X (uint3 id : SV_DispatchThreadID)
{
    float ParticleRadius = WAVEPARTICLERADIUS;
    

    uint LODCount = (uint)_LODParams.x;
    float LODIndex = id.z;
    float CurrentLODSize = _LODParams.z * pow(2, LODIndex);
    

    //Get dims
    uint width, height, elements;
    _DisplaceArray.GetDimensions(width, height, elements);

    int UV_PRadius = floor(ParticleRadius / CurrentLODSize * width);
    

    //float CombinedAmp = _DisplaceArray[uint3(id.x, id.y, LODIndex)].a;
    float CombinedAmp = Custom_IntToFloat(_PointFrame[uint3(id.x, id.y, LODIndex)]);
    float CombinedXoffset = 0.0;
    
    //unroll[16]
    for (int i = 1; i < UV_PRadius; i++)
    {

        float neighbouroffset_right = Custom_IntToFloat(_PointFrame[uint3(id.x + i, id.y, LODIndex)]);
        float neighbouroffset_left = Custom_IntToFloat(_PointFrame[uint3(id.x - i, id.y, LODIndex)]);
          
        float x = (float)i / (float)UV_PRadius;
        float cheapstep = pow(1.0 - x*x, 2);
        float cheapstep_derivative = (1.0 - x * x) * (-2*x);

        float weight_height = cheapstep;
        float weight_X = cheapstep_derivative * WP_HORI_MUL;

        CombinedAmp += cheapstep * (neighbouroffset_left + neighbouroffset_right);
        CombinedXoffset +=  -weight_X * neighbouroffset_right + weight_X * neighbouroffset_left;
    }
    
    float4 WPDisplacement = float4(CombinedXoffset, CombinedAmp, 0.0, 0.0);


    _WaveParticleArray[uint3(id.x, id.y, LODIndex + LODCount/2)] = WPDisplacement;

}

[numthreads(32, 32, 1)]
void PointsToDisplacement_Y(uint3 id : SV_DispatchThreadID)
{
    float ParticleRadius = WAVEPARTICLERADIUS;

    uint LODCount = (uint)_LODParams.x;
    float LODIndex = id.z;
    float CurrentLODSize = _LODParams.z * pow(2, LODIndex);

    //Get dims
    uint width, height, elements;
    _DisplaceArray.GetDimensions(width, height, elements);

    int UV_PRadius = floor(ParticleRadius / CurrentLODSize * width);

    float4 WPDisplaceData = _WaveParticleArray[uint3(id.x, id.y, LODIndex + LODCount/2)];
    float CombinedAmp = WPDisplaceData.y;
    float CombinedXoffset = WPDisplaceData.x;
    float CombinedYoffset = 0.0;
    //unroll[16]
    
    for (int i = 1; i < UV_PRadius; i++)
    {

        float4 neighbourDisplace_up = _WaveParticleArray[uint3(id.x, id.y + i, LODIndex + LODCount/2)];
        float4 neighbourDisplace_down = _WaveParticleArray[uint3(id.x, id.y - i, LODIndex + LODCount/2)];

        float x = (float)i / (float)UV_PRadius;
        float cheapstep = pow(1.0 - x * x, 2);
        float cheapstep_derivative = (1.0 - x * x) * (-2 * x);

        float weight_height = cheapstep;
        float weight_Y = cheapstep_derivative * WP_HORI_MUL;

        CombinedAmp += cheapstep * (neighbourDisplace_up.y + neighbourDisplace_down.y);
        CombinedXoffset += cheapstep * neighbourDisplace_up.x + cheapstep * neighbourDisplace_down.x;
        CombinedYoffset += -weight_Y * neighbourDisplace_up.y + weight_Y * neighbourDisplace_down.y;

    }
    
    float4 WPDisplacement = float4(CombinedXoffset, CombinedAmp, CombinedYoffset, CombinedAmp);

    _WaveParticleArray[uint3(id.x, id.y, LODIndex)] = WPDisplacement;

    //derivates debug
    //float4 Derivative = _DerivativeArray[uint3(id.x, id.y, LODIndex)];
    //WPDisplacement = float4(0.0,Derivative.y,0.0,0.0) * 100.0;
    //debug end

    float4 Displace = _DisplaceArray[uint3(id.x, id.y, LODIndex)];

    Displace += WPDisplacement;

    _DisplaceArray[uint3(id.x, id.y, LODIndex)] = Displace;
    
}

[numthreads(32, 32, 1)]
void ApplyWaveParicles(uint3 id : SV_DispatchThreadID)
{
    float ParticleRadius = WAVEPARTICLERADIUS;

    uint LODCount = (uint)_LODParams.x;
    float LODIndex = id.z;
    float CurrentLODSize = _LODParams.z * pow(2, LODIndex);

    //Get dims
    uint width, height, elements;
    _DisplaceArray.GetDimensions(width, height, elements);

    float3 WP_D_center = _WaveParticleArray[uint3(id.x, id.y, LODIndex)].rgb;
    float3 WP_D_left = _WaveParticleArray[uint3(id.x-1, id.y, LODIndex)].rgb;
    float3 WP_D_right = _WaveParticleArray[uint3(id.x+1, id.y, LODIndex)].rgb;
    float3 WP_D_up = _WaveParticleArray[uint3(id.x, id.y+1, LODIndex)].rgb;
    float3 WP_D_down = _WaveParticleArray[uint3(id.x, id.y-1, LODIndex)].rgb;

    float unit = METER_PER_PIXEL * pow(2, LODIndex)*2;

    float Dxx = (WP_D_right.x - WP_D_left.x)/unit;
    float Dyy = (WP_D_up.y - WP_D_down.y)/unit;
    float Dxy = (WP_D_up.x - WP_D_down.x)/unit;
    float Dyx = (WP_D_right.y - WP_D_left.y)/unit;
    float Dzx = (WP_D_right.z - WP_D_left.z)/unit;
    float Dzy = (WP_D_up.z - WP_D_down.z)/unit;
    
    float4 derivates = _DerivativeArray[uint3(id.x, id.y, LODIndex)];
    float4 velocities = _VelocityArray[uint3(id.x, id.y, LODIndex)];
    derivates += float4(Dxx, Dyy, Dzx, Dzy);
    velocities += float4(0.0, 0.0, Dxy, Dyx);
    _DerivativeArray[uint3(id.x, id.y, LODIndex)] = derivates;
    _VelocityArray[uint3(id.x, id.y, LODIndex)] = velocities;
}

[numthreads(4, 1, 1)]
void UpdateWaveParicles(uint3 id : SV_DispatchThreadID)
{
    //LEts first try *a sphere *on surface *constant speed

    float3 positionWS = float3(10.0,0.0,35.0);
    float3 velocity = float3(1.0,0.0,0.0);
    float radius = 1.0;
     
    float3 ReltivePos = positionWS - _CenterPos;
    float LOD0Size = _LODParams.z;

    //*******Get displace and Vel*****
    int lodIndex = GetWaveLODOnPos(ReltivePos);
    float2 UV  = ReltivePos.xz/(LOD0Size * pow(2, lodIndex)) + 0.5f;
    float4 Displace = BilinearSamplerTextureArray(_DisplaceArray, UV, lodIndex);
    //!!!!compensate offset??!!!!
    ReltivePos.xz -= Displace.xz;
    UV = ReltivePos.xz/(LOD0Size * pow(2, lodIndex)) + 0.5f;
    //Displace = _DisplaceLOD.SampleLevel(linearClampSampler, UV, 0);
    Displace = BilinearSamplerTextureArray(_DisplaceArray, UV, lodIndex);
    float3 WaterVelocity = BilinearSamplerTextureArray(_VelocityArray, UV, lodIndex).rgb;
    float3 relativeVelocity = velocity - WaterVelocity;


    //*****Generate Wave paricles******
    //generate WP in parallal is going to get race condition.
    /*
        float Amplitude;
    float Radius;
    float BirthTime;
    float DispersionAngle;
    float2 Direction;
    float2 Origin;
    WaveParticle wp = WaveParticle(1.0, _TimeParams.x, 180.0, normalize(relativeVelocity), positionWS.xz);

    uint WP_pointer = 
    _WaveParticleBuffer[_WaveParticleParamsBuffer]
    */
}

[numthreads(32, 32, 1)]
void ClearIntTex(uint3 id : SV_DispatchThreadID)
{
    _PointFrame[id.xyz] = 0;
}